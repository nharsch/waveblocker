{"version":3,"sources":["app/main.cljs"],"mappings":";;;;;;;;AAWA,AAAKA,AAAK,AAAA,AAAA;AACV,AAAA,AAAKC;AAEL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AACP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAWH,AAAKC,AAAQ,AAAA,AAACC;AAGd,AAAA,AAAMC;AAAN,AACE,AAAA,AAAQ,AAACC,AAAO,AAAA,AAAA,AAAAC,AAAWN;AACzB,AACE,AAAA,AAACO,AAAMP,AAAUQ,AAAY,AAACC,AAAK,AAAA,AAAA,AAAAH,AAAQN,AAAW,AAACU,AAAK,AAAA,AAAA,AAAAJ,AAAWN;;AACvE,AAAA,AAACO,AAAMP,AAAUQ,AAAe,AAACG,AAAI,AAAA,AAAA,AAAAL,AAAWN;;AAHpD;;;AAKF,AAAA,AAAMY;AAAN,AACE,AAAA,AAAQ,AAACP,AAAO,AAAA,AAAA,AAAAC,AAAQN;AACtB,AACE,AAAA,AAACO,AAAMP,AAAUQ,AAAe,AAACC,AAAK,AAAA,AAAA,AAAAH,AAAWN,AAAW,AAACU,AAAK,AAAA,AAAA,AAAAJ,AAAQN;;AAC1E,AAAA,AAACO,AAAMP,AAAUQ,AAAY,AAACG,AAAI,AAAA,AAAA,AAAAL,AAAQN;;AAH9C;;;AAKF,AAAA,AAAMa;AAAN,AAAiB,AAAA,AAAA,AAACN,AAAMP,AAAUQ;;AAGlC,AAAA,AAAMM,AAAeC,AAAEC;AAAvB,AAAA;AAEE,AAACP,AACA,AAAA,AAACQ,AAAQ,AAACC,AAAQH,AAClB,AAAAI,AAAG,AAACT,AAAKK;AAAT,AAAA,AAAAI,AAAAA,AAACH,AAAAA,AAAAA;;;AAGJ,AAAA,AAAMI,AAAcC,AAAEC,AAAEC;AAAxB,AACE,AAAGF,AAAE,AAACG,AAASF,AAAE,AAAA,AAAGC;;AAGtB,AAAA,AAAME,AAAkBJ,AAAEC,AAAEP;AAA5B,AACE,AAAA,AAAG,AACG,AAACW,AAAS,AAAGX,AAAEM,AACf,AAACK,AAASJ;;AAMlB,AAAA,AAAMK,AAAaC,AAAKC,AAAKC;AAA7B,AACE,AAACC,AACA,AAAA,AAEG,AACC,AAAA,AAAK,AAAGF,AAAKD,AACb,AACC,AAAAI,AAAKJ;AAALK,AAAU,AAAAC,AAAKL;AAALM,AAAUL;AAAV,AAAA,AAAAI,AAAAC,AAAAD,AAAAC;;AAAV,AAAA,AAAAH,AAAAC,AAAAD,AAAAC;AACAL;;AAMR,AAAKQ,AAAiB,AAACC,AAAQV;AAE/B,AAAA,AAAMW,AAAeC;AAArB,AACE,AAAA,AAACH,AAAmB,AAAA,AAAA,AAAA9B,AAAmBN,AAAW,AAAWuC;;AAM/D,AAAA,AAAMC,AAAoBC,AAAKC;AAA/B,AAAA;AAEE,AAAI,AAAGA,AAAKD;AAAZ;;AAEE,AAAME,AAAI,AAAA,AAAA,AAACvB,AAAaqB;AAChBG,AAAK,AAAA,AAAA,AAACxB,AAAaqB;AAD3B,AAEI,AAAI,AAAGC,AAAKE;AACZH;;AACA,AAACD,AAAAA,AAAAA,AAAmBI,AAAAA,AAAKF,AAAAA;;;;AAEjC,AAAA,AAAMG,AAAaC,AAAUC,AAAUL;AAAvC,AACE,AAAMC,AAAI,AAACH,AAAmBM,AAAUJ;AAClCM,AAAE,AAAG,AAAGN,AAAKC,AAAK,AAAA,AAAKA;AAD7B,AAEE,AAAG,AAAA,AAAG,AAAA,AAAA,AAACvB,AAAiB,AAAA,AAAK4B,AAC1BD;;AACP,AAAKE,AAAiB,AAACZ,AAAQQ;AAK/B,AAAA,AAAMK,AAAoBT,AAAKU,AAAaC,AAAUV;AAAtD,AAAA;AAEE,AAAME,AAAK,AAAA,AAACxB,AAAaqB,AAAO,AAAA,AAAKU;AAArC,AACE,AAEC,AAAG,AAAAjB,AAAK,AAAA,AAAG,AAAA,AAACT,AAAiBgB,AAAOC;AAAjCP,AAA0CgB;AAA1C,AAAA,AAAAjB,AAAAC,AAAAD,AAAAC;AACAgB,AACHC;;AACL,AAAKC,AAAwB,AAAChB,AAAQa;AAEtC,AAAA,AAAMI,AAAaC,AAAahB;AAAhC,AACE;AAAKiB,AACH,AAAA,AAACC,AACmBF,AACA,AAAAhB,AACA;AAAA,AAAO,AAAA,AAACmB;;;;AAGhC,AAAA,AAAMC,AAAOC;AAAb,AACE,AAAKC,AAAI,AAAA,AAAA,AAAeD;;AACxB,AAAeC,AAAIhD;;AACnB,AAAiB+C;;AACjB,AAAKE,AAAa,AAAkBF;;AACpC,AAAKG,AAAI,AAAAC;;AACT,AAAQD,AAAI,AAACE,AAAQX,AAAYQ,AAAaC;;AAIhD,AAAA,AAAMG;AAAN,AACE,AAAC,AAAAV,AACC,AAAKW,AAAKzB;AAAV,AACE,AAAIA;AACF,AAAA,AAACnC,AAAMP,AAAUQ,AAAakC;;AADhC;;;;AAGN,AAAA,AAAM0B,AAAWR;AAAjB,AACE,AAAMlB,AAAK,AAAA,AAAA,AAAApC,AAASN;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACM,AAAU4D,AACV,AAAUA,AACV,AAAA,AAACX,AAAiBtD,AAAS+C,AAC3B,AAAA,AAACW,AAAwB1D,AAAKC,AAAiB8C,AAC/C,AAAA,AAAM,AAAA,AAAO,AAACJ,AAAcyB;;AAEpC,AAAA,AAAMM,AAAgBT,AAAEU;AAAxB,AACE,AACE,AAAA,AAAA,AAAYV;;AACZ,AAAWA;;AACX,AAAOA,AAAE,AAAA,AAAIU,AAAI,AAAA,AAAIA,AAAI,AAAA,AAAIA;;AAC7B,AAAA,AAAA,AAAUV,AAAE,AAAA,AAAIU,AAAI,AAAA,AAAIA;;AAE5B,AAAA,AAAMC,AAAMX;AAAZ,AACE,AAAI,AAAAA;AAEF,AAAA,AAAQ,AAAA,AAAK,AAAUA;AACrB,AACE,AAAA,AAAAY,AAAQ,AAAA,AAAA,AAAAlE,AAAUN;AAChB,AAAA,AAACyE,AAAOvE;;AADV;;AAEA,AAAA,AAAAsE,AAAA,AAAAlE,AAASJ;AACP,AACE,AAAA,AAACuE,AAAOvE;;AAER,AAAA,AAAA,AAACK,AAAMP,AAAU0E,AAAgBC,AAAM,AAACP,AAAUR;;AAJtD;;AAJJ;;AAUA,AACI,AAAA,AAAAtD,AAAKJ;AACD,AAAA,AAACuE,AAAOvE;;AADZ;;;AAGN,AAAA,AAAAsE,AAAQ,AAAA,AAAA,AAAAlE,AAAUN;AAChB,AACI,AAAA,AAAW4D;;AACX,AAAQA;;AACR,AAAA,AAAOA;;AACP,AAAA,AAAA,AAAA,AAAOA;;AAEX,AAEI,AAAA,AAAWA;;AACX,AAACM;;AACD,AAAA,AAAC3D,AAAMP,AAAUQ,AAAiB,AAAC8B,AAAcyB;;AACjD,AAAA,AAAaH;;AACb,AAAAgB,AAAA,AAAAC,AAAgB,AAAA,AAAA,AAAAvE,AAAWN;AAA3B8E,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAAAC,AAAA,AAAAb,AAAUY;AAAVE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQK;AAAR,AAAA,AACE,AACE,AAAC7B,AAAeT,AAAEsC;;AAFtB;AAAA,AAAAR;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAZ,AAAA,AAAAJ,AAAAa;AAAA,AAAA,AAAAT;AAAA,AAAA,AAAAS,AAAAT;AAAA,AAAA,AAAA,AAAAC,AAAAQ;AAAA,AAAAP,AAAA,AAAAC,AAAAM;AAAA,AAAA,AAAA,AAAAL,AAAAK;AAAAP;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAG,AAAQQ;AAAR,AAAA,AACE,AACE,AAAC7B,AAAeT,AAAEsC;;AAFtB;AAAA,AAAA,AAAAV,AAAAE;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAAd;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AAAAK,AAAA,AAAAjB,AAAUY;AAAVM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AACE,AAAC7B,AAAeT,AAAEsC;;AAFtB;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAhB,AAAA,AAAAJ,AAAAiB;AAAA,AAAA,AAAAb;AAAA,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAA,AAAAC,AAAAY;AAAA,AAAAX,AAAA,AAAAC,AAAAU;AAAA,AAAA,AAAA,AAAAT,AAAAS;AAAAX;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAO,AAAQI;AAAR,AAAA,AACE,AACE,AAAC7B,AAAeT,AAAEsC;;AAFtB;AAAA,AAAA,AAAAV,AAAAM;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;AAAA,AAAA,AAAAN,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AAIA,AAAA,AAAAtE,AAAKJ;AAEH,AAAMiG,AAAG,AAACrF,AAAc,AAAA,AAAA,AAAAR,AAAWN,AAAW,AAAKe;AAAL,AAAQ,AAACN,AAAKM,AAAE,AAACqD,AAAUR;;AAAzE,AACE,AAAA,AAACrD,AAAMP,AAAUQ,AAAe2F;;AAHpC;;AAIA,AAAA,AAAA,AAAYvC;;AACZ,AAAWA;;AAEX,AAAMsC,AAAE,AAAC9B,AAAUR;AAAnB,AACE,AAACS,AAAeT,AAAEsC;;AAElB,AAAA,AAAA,AAAA,AAAOtC,AAAO,AAAA,AAAO,AAACtB,AAAcyB;;AACtC,AAAA,AAAA,AAAA,AAAOH;;AAEP,AAAA,AAAA,AAAA,AAAA,AAAOA;;AACP,AAAA,AAAA,AAAA,AAAOA;;AACP,AAAA,AAAA,AAAA,AAAOA;;AACP,AAAA,AAAA,AAAA,AAAOA;;AACP,AAAA,AAAA,AAAA,AAAOA;;;AAMf,AAAA,AAAMwC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKmB,AAAA,AAAK,AAAA,AAAA,AAAA9F,AAAmBN,AACpB,AAAKqG;AAAL,AACG,AAAA,AAAC9F,AAAMP,AAAUQ,AAAuB,AAAA,AAAK,AAAA,AAAI6F;;;AAG3E,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIF,AACmBhG,AACAQ;;AAGvB,AAAA,AAAM2F;AAAN,AACE,AAAA,AAACC,AACEF,AACD,AAAA,AAACG;;AAIL,AAAA,AAAKC;AACL,AAAU,AAACD,AAAaC;AAAxB;AAAA,AACE,AAACC,AAASC,AAAiB,AAAA,AAAA,AAACC,AAA2BH;;AACzD,AAAKI,AAAW,AAACL,AAAaC;AAC9B,AAAKK,AACD,AAAKC,AACD,AAAKpD;AAAL,AACI,AAAM,AAASA,AAAG;AAAA,AAAO,AAACD,AAAMC;;;AAChC,AAAM,AAAQA,AAAG;AAAA,AAAO,AAACW,AAAKX;;AAClCkD;AACR,AAACP;AACD,AAAA,AAAC7C","names":["app.main/BASE","app.main/OCTAVE-RANGE","js/app","js/app.main","js/app.main.app-state","app.main/app-state","reagent.core.atom","app.main/drawing","cljs.core.atom","app.main/undo","cljs.core/empty?","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.conj","cljs.core/last","cljs.core/pop","app.main/redo","app.main/turn-on","app.main/v-update-last","v","f","cljs.core.into","cljs.core/butlast","G__28467","app.main/geo-sequence","a","r","n","Math/pow","app.main/inverse-geo-prog","Math/log","app.main/level-curve","lmin","lmax","level","Math/log2","x__4273__auto__","y__4274__auto__","x__4276__auto__","y__4277__auto__","app.main/level-curve-memo","cljs.core/memoize","app.main/get-mic-level","mic","app.main/find-base-oct-freq","base","freq","low","high","app.main/freq-to-hue","base-freq","color-max","i","app.main/freq-to-hue-memo","app.main/freq-to-saturation","octave-range","sat-range","app.main/freq-to-saturation-memo","app.main/start-pitch","audioContext","app.main/pitch","js/module$ml5.pitchDetection","cljs.core.println","app.main/setup","p","app.main/cnv","app.main/audioContext","app.main/mic","js/module$p5.AudioIn","cljs.core.partial","app.main/update-pitch","err","app.main/paint-map","app.main/draw-paint-map","pm","app.main/draw","cljs.core/not","cljs.core/reset!","cljs.core/update","cljs.core/conj","seq__28468","cljs.core/seq","chunk__28469","count__28470","i__28471","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","strokes","seq__28480","chunk__28481","count__28482","i__28483","seq__28484","chunk__28485","count__28486","i__28487","m","nh","app.main/mic-slider","event","app.main/toolbar-component","app.main/render-toolbar","reagent.dom.render","goog.dom/getElement","app.main/parent-id","goog.dom/append","js/document.body","goog.dom/createDom","app.main/canvas-div","app.main/paint-canvas","js/module$p5"],"sourcesContent":["(ns app.main\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [goog.dom :as d]\n   [goog.events :as gevents]\n   [\"p5\" :as p5]\n   [\"ml5\" :as ml5]\n   ))\n\n\n(def BASE (/ 2 55))\n(def OCTAVE-RANGE 3)\n\n(defonce app-state\n  (r/atom {\n         :app-on false\n         :mic-on false\n         :pitch-on false\n         :pitch 0\n         :mic-sensitivity 0.25\n         :mic-level 0\n         :history []\n         :redo []\n         }))\n; drawing separate atom state for performance?\n(def drawing (atom false))\n\n\n(defn undo []\n  (if-not (empty? (:history @app-state))\n    (do\n      (swap! app-state assoc :redo (conj (:redo @app-state) (last (:history @app-state))))\n      (swap! app-state assoc :history (pop (:history @app-state))))))\n\n(defn redo []\n  (if-not (empty? (:redo @app-state))\n    (do\n      (swap! app-state assoc :history (conj (:history @app-state) (last (:redo @app-state))))\n      (swap! app-state assoc :redo (pop (:redo @app-state))))))\n\n(defn turn-on [] (swap! app-state assoc :app-on true))\n\n; utils\n(defn v-update-last [v f]\n  \"return vector with last element updated\"\n  (conj\n   (into [] (butlast v))\n   (f (last v))))\n;; (v-update-last [[{:x 1}{:x 2}] [{:x 1}{:x 2}]] (fn [v] (conj v {:x 3})))\n\n(defn geo-sequence [a r n]\n  (* a (Math/pow r (- n 1))))\n;; (= (geo-sequence 1 2 3) 4)\n\n(defn inverse-geo-prog [a r v]\n  (+ (/\n        (Math/log (/ v a))\n        (Math/log r))\n     1))\n;; (= (inverse-geo-prog 1 2 4) 3)\n;; (= (inverse-geo-prog 110 2 880) 4)\n;;\n;;\n(defn level-curve [lmin lmax level]\n  (Math/log2\n   (+ 1\n  ;;     ; set max vol ~ 80% min vol ~10%\n      (*\n       (/ 1 (- lmax lmin))\n       (-\n        (max lmin (min lmax level))\n        lmin)\n       ))))\n\n\n;; (map (partial level-curve 0 0.1) [0 0.5 1])\n\n(def level-curve-memo (memoize level-curve))\n\n(defn get-mic-level [mic] ; curve val ;; (level-curve-memo (.getLevel mic))\n  (level-curve-memo 0 (:mic-sensitivity @app-state) (.getLevel mic)))\n\n\n\n;; (map Math/log2 [1 1.5 2])\n\n(defn find-base-oct-freq [base freq]\n  \"given a minimum base frequency, find the nearest octave belor freq\"\n  (if (< freq base)\n    nil\n    (let [low (geo-sequence base 2 1)\n            high (geo-sequence base 2 2)]\n        (if (< freq high)\n        base\n        (find-base-oct-freq high freq)))))\n\n(defn freq-to-hue [base-freq color-max freq]\n  (let [low (find-base-oct-freq base-freq freq)\n        i (* (- freq low) (/ 1 low))]\n    (* (- (geo-sequence 1 2 (+ 1 i)) 1)\n       color-max)))\n(def freq-to-hue-memo (memoize freq-to-hue))\n;; (map (partial freq-to-hue 110 100) [110 120 160 200 220])\n;; (map (partial freq-to-hue 110 100) [220 440 880])\n\n\n(defn freq-to-saturation [base octave-range sat-range freq]\n  \"given a base frequency, range of octaves, and a color range (from 0), find saturation value for frequency\"\n  (let [high (geo-sequence base 2 (+ 1 octave-range))]\n    (*\n     ; find the freq as a value in freq space, up to octave-range\n     (/ (min (- (inverse-geo-prog base 2 freq) 1) octave-range)\n        octave-range)\n     sat-range)))\n(def freq-to-saturation-memo (memoize freq-to-saturation))\n\n(defn start-pitch [audioContext mic]\n  (def pitch\n    (ml5/pitchDetection \"assets/app/model\"\n                        audioContext\n                        mic.stream\n                        (fn [] (println \"model loaded\")))))\n\n\n(defn setup [p]\n  (def cnv (.createCanvas p 1200 1200))\n  (.mouseClicked cnv turn-on)\n  (.userStartAudio p)\n  (def audioContext (.getAudioContext p))\n  (def mic (p5/AudioIn.))\n  (.start mic (partial start-pitch audioContext mic))\n)\n\n\n(defn update-pitch []\n  (pitch.getPitch\n    (fn [err, freq]\n      (if freq\n        (swap! app-state assoc :pitch freq)))))\n\n(defn paint-map [p]\n  (let [freq (:pitch @app-state)]\n    {:x (.-mouseX p)\n     :y (.-mouseY p)\n     :h (freq-to-hue-memo BASE 100 freq)\n     :s (freq-to-saturation-memo BASE OCTAVE-RANGE 100 freq)\n     :b (+ 10 (* 100 (get-mic-level mic)))}))\n\n(defn draw-paint-map [p pm]\n  (do\n    (.colorMode p \"hsb\" 100)\n    (.noStroke p)\n    (.fill p (:h pm) (:s pm) (:b pm))\n    (.ellipse p (:x pm) (:y pm) 40 40)))\n\n(defn draw [p]\n  (if p.mouseIsPressed\n    ; pressed\n    (if-not (> 0 (.-mouseY p))\n      (do\n        (if-not (:app-on @app-state)\n          (reset! drawing true))\n        (if-not @drawing\n          (do\n            (reset! drawing true)\n            ; add new stroke map\n            (swap! app-state update :history conj [(paint-map p)])))))\n    ; not pressed\n    (do\n        (if @drawing\n            (reset! drawing false))))\n\n  (if-not (:app-on @app-state)\n    (do\n        (.textSize p 52)\n        (.clear p)\n        (.fill p 50)\n        (.text p \"tap to start\" 50 80)\n    )\n    (do\n        ; TODO: call update pitch less often than draw\n        (.textSize p 12)\n        (update-pitch)\n        (swap! app-state assoc :mic-level (get-mic-level mic))\n        (.background p 255)\n        (doseq [strokes (:history @app-state)]\n          (doseq [m strokes]\n            (do\n              (draw-paint-map p m))))\n        (if @drawing\n          ; append to last stroke history\n          (let [nh (v-update-last (:history @app-state) (fn [v] (conj v (paint-map p))))]\n            (swap! app-state assoc :history nh)))\n        (.colorMode p \"hsb\" 100)\n        (.noStroke p)\n        ; draw paint tip\n        (let [m (paint-map p)]\n          (draw-paint-map p m)\n          ; level fader\n          (.rect p 0 10 (* 250 (get-mic-level mic)) 10))\n        (.fill p  0 0 50)\n        ; level ref\n        (.rect p 0 0 250 10)\n        (.fill p 0 0 0)\n        (.text p \"min vol\" 1 8)\n        (.fill p 0 0 100)\n        (.text p \"max vol\" 205 8)\n        )))\n\n\n\n;; toolbar\n(defn mic-slider []\n  [:span \"mic sensitivity\"\n    [:input {:type \"range\"\n            :name \"volume\"\n            :min 0 :max 0.99 :step 0.05\n            :value (- 1 (:mic-sensitivity @app-state))\n            :on-change (fn [event]\n                          (swap! app-state assoc :mic-sensitivity (- 1 (-> event .-target .-value)))\n                         )}]])\n\n(defn toolbar-component []\n  [:div\n   [mic-slider]\n   [:button {:on-click undo} \"undo\"]\n   [:button {:on-click redo} \"redo\"]\n  ])\n\n(defn render-toolbar []\n  (rdom/render\n    [toolbar-component]\n    (d/getElement \"toolbar\")))\n\n\n;; start app\n(def parent-id \"canvas-container\")\n(when-not (d/getElement parent-id)\n  (d/append js/document.body (d/createDom \"div\" #js {:id parent-id})))\n(def canvas-div (d/getElement parent-id))\n(def paint-canvas\n    (new p5\n        (fn [p]\n            (set! (.-setup p) (fn [] (setup p)))\n            (set! (.-draw p) (fn [] (draw p))))\n        canvas-div))\n(render-toolbar)\n(println \"app loaded\")\n\n"]}